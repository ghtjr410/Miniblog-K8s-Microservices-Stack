apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: miniblog
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.1.0
          ports:
            - containerPort: 3000
          env:
            - name: GF_SERVER_ROOT_URL
              value: https://grafana.ghtjr.com/
            - name: GF_SERVER_HOME_URL
              value: https://grafana.ghtjr.com/
            - name: GF_AUTH_DISABLE_LOGIN_FORM
              value: "true"
            - name: GF_AUTH_GENERIC_OAUTH_ENABLED
              value: "true"
            - name: GF_AUTH_GENERIC_OAUTH_NAME
              value: Keycloak
            - name: GF_AUTH_GENERIC_OAUTH_CLIENT_ID
              value: grafana-client
            - name: GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET
              value: 
            - name: GF_AUTH_GENERIC_OAUTH_SCOPES
              value: openid email profile
            - name: GF_AUTH_GENERIC_OAUTH_AUTH_URL
              value: https://keycloak.ghtjr.com/realms/miniblog-realm/protocol/openid-connect/auth
            - name: GF_AUTH_GENERIC_OAUTH_TOKEN_URL
              value: http://keycloak-service.miniblog.svc.cluster.local:8080/realms/miniblog-realm/protocol/openid-connect/token
            - name: GF_AUTH_GENERIC_OAUTH_API_URL
              value: http://keycloak-service.miniblog.svc.cluster.local:8080/realms/miniblog-realm/protocol/openid-connect/userinfo
            - name: GF_AUTH_SIGNOUT_REDIRECT_URL
              value: https://keycloak.ghtjr.com/realms/miniblog-realm/protocol/openid-connect/logout?client_id=grafana-client&post_logout_redirect_uri=https://grafana.ghtjr.com/login
            - name: GF_AUTH_OAUTH_AUTO_LOGOUT
              value: "true"
            - name: GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH
              value: contains(realm_access.roles[*], 'admin') && 'Admin' || (contains(realm_access.roles[*], 'develop') && 'Editor' || 'Viewer')
          volumeMounts:
            - name: grafana-config
              mountPath: /etc/grafana/provisioning/datasources
      volumes:
        - name: grafana-config
          configMap:
            name: grafana-configmap
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: miniblog
spec:
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-configmap
  namespace: miniblog
data:
  datasource.yml: |
    apiVersion: 1
    
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        editable: false
        jsonData:
          httpMethod: POST
          exemplarTraceIdDestinations:
            - name: trace_id
              datasourceUid: tempo
      - name: Loki
        type: loki
        uid: loki
        access: proxy
        orgId: 1
        url: http://loki:3100
        basicAuth: false
        isDefault: false
        version: 1
        editable: false
        apiVersion: 1
        jsonData:
          derivedFields:
            - datasourceUid: tempo
              matcherRegex: \[.+,(.+?),
              name: TraceID
              url: $${__value.raw}